// Code generated by MockGen. DO NOT EDIT.
// Source: filesystem_interface.go
//
// Generated by this command:
//
//	mockgen -source=filesystem_interface.go -destination=./mocks/filesystem.go -package=filesystem_mocks
//

// Package filesystem_mocks is a generated GoMock package.
package filesystem_mocks

import (
	reflect "reflect"

	afero "github.com/spf13/afero"
	gomock "go.uber.org/mock/gomock"
)

// MockFileSystemInterface is a mock of FileSystemInterface interface.
type MockFileSystemInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemInterfaceMockRecorder
}

// MockFileSystemInterfaceMockRecorder is the mock recorder for MockFileSystemInterface.
type MockFileSystemInterfaceMockRecorder struct {
	mock *MockFileSystemInterface
}

// NewMockFileSystemInterface creates a new mock instance.
func NewMockFileSystemInterface(ctrl *gomock.Controller) *MockFileSystemInterface {
	mock := &MockFileSystemInterface{ctrl: ctrl}
	mock.recorder = &MockFileSystemInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystemInterface) EXPECT() *MockFileSystemInterfaceMockRecorder {
	return m.recorder
}

// CreateDirectoryIfNotExists mocks base method.
func (m *MockFileSystemInterface) CreateDirectoryIfNotExists(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectoryIfNotExists", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDirectoryIfNotExists indicates an expected call of CreateDirectoryIfNotExists.
func (mr *MockFileSystemInterfaceMockRecorder) CreateDirectoryIfNotExists(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectoryIfNotExists", reflect.TypeOf((*MockFileSystemInterface)(nil).CreateDirectoryIfNotExists), path)
}

// CreateFile mocks base method.
func (m *MockFileSystemInterface) CreateFile(filename string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", filename)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileSystemInterfaceMockRecorder) CreateFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileSystemInterface)(nil).CreateFile), filename)
}

// CreateFileIfNotExists mocks base method.
func (m *MockFileSystemInterface) CreateFileIfNotExists(filename string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileIfNotExists", filename)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileIfNotExists indicates an expected call of CreateFileIfNotExists.
func (mr *MockFileSystemInterfaceMockRecorder) CreateFileIfNotExists(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileIfNotExists", reflect.TypeOf((*MockFileSystemInterface)(nil).CreateFileIfNotExists), filename)
}

// ReadDir mocks base method.
func (m *MockFileSystemInterface) ReadDir(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileSystemInterfaceMockRecorder) ReadDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFileSystemInterface)(nil).ReadDir), path)
}

// ReadFile mocks base method.
func (m *MockFileSystemInterface) ReadFile(filePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemInterfaceMockRecorder) ReadFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystemInterface)(nil).ReadFile), filePath)
}

// WriteFile mocks base method.
func (m *MockFileSystemInterface) WriteFile(filename, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileSystemInterfaceMockRecorder) WriteFile(filename, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystemInterface)(nil).WriteFile), filename, content)
}
