{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "GitHub Repository Management API",
    "description": "API specification for managing GitHub repositories using the GitHub API."
  },
  "host": "api.github.com",
  "basePath": "/",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/user/repos": {
      "get": {
        "summary": "List repositories for the authenticated user",
        "description": "Lists all repositories for the authenticated user.",
        "operationId": "listUserRepos",
        "tags": ["Repositories"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of repositories to list.",
            "required": false,
            "type": "string",
            "enum": ["all", "owner", "public", "private", "member"]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a repository for the authenticated user",
        "description": "Creates a new repository for the authenticated user.",
        "operationId": "createUserRepo",
        "tags": ["Repositories"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Repository object to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewRepository"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Repository created",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "summary": "Get a repository",
        "description": "Retrieves a repository by owner and repo name.",
        "operationId": "getRepo",
        "tags": ["Repositories"],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Owner of the repository",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Name of the repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a repository",
        "description": "Updates repository information.",
        "operationId": "updateRepo",
        "tags": ["Repositories"],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Owner of the repository",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Name of the repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Repository object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRepository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repository updated",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a repository",
        "description": "Deletes a repository.",
        "operationId": "deleteRepo",
        "tags": ["Repositories"],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "Owner of the repository",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "description": "Name of the repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Repository deleted"
          }
        }
      }
    }
  },
  "definitions": {
    "Repository": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "private": {
          "type": "boolean"
        },
        "html_url": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        },
        "fork": {
          "type": "boolean"
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "pushed_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NewRepository": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the repository"
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository"
        },
        "homepage": {
          "type": "string",
          "format": "uri",
          "description": "Repository homepage URL"
        },
        "private": {
          "type": "boolean",
          "description": "True to create a private repository"
        },
        "has_issues": {
          "type": "boolean",
          "description": "True to enable issues for this repository"
        },
        "has_projects": {
          "type": "boolean",
          "description": "True to enable projects for this repository"
        },
        "has_wiki": {
          "type": "boolean",
          "description": "True to enable the wiki for this repository"
        }
      }
    },
    "UpdateRepository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "New name of the repository"
        },
        "description": {
          "type": "string",
          "description": "New description of the repository"
        },
        "homepage": {
          "type": "string",
          "format": "uri",
          "description": "New homepage URL"
        },
        "private": {
          "type": "boolean",
          "description": "True to make the repository private"
        },
        "has_issues": {
          "type": "boolean",
          "description": "True to enable issues for this repository"
        },
        "has_projects": {
          "type": "boolean",
          "description": "True to enable projects for this repository"
        },
        "has_wiki": {
          "type": "boolean",
          "description": "True to enable the wiki for this repository"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "avatar_url": {
          "type": "string",
          "format": "uri"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://github.com/login/oauth/authorize",
      "tokenUrl": "https://github.com/login/oauth/access_token",
      "scopes": {
        "repo": "Full control of private repositories",
        "public_repo": "Access public repositories"
      }
    }
  },
  "security": [
    {
      "oauth2": ["repo", "public_repo"]
    }
  ]
}
